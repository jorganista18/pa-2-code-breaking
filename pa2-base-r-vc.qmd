---
title: "Practice Activity 2: Break the Code"
format: gfm
editor: source
execute: 
  echo: true
  eval: false
---

```{r}
#| label: load-packages
#| include: false
library(tidyverse)
```

Today you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message.

***This task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to solve this puzzle, you will need to use the skills of each member of your group.***

## Groupwork Protocols

During the Practice Activity, you and your partner will alternate between two roles---Developer and Coder.

When you are the **Developer**, you will type into the Quarto document in RStudio. However, you **do not** type your own ideas. Instead, you type what the Coder tells you to type. You are permitted to ask the Coder clarifying questions, and, if both of you have a question, you are permitted to ask the professor. You are expected to run the code provided by the Coder and, if necessary, to work with the Coder to debug the code. Once the code runs, you are expected to collaborate with the Coder to write code comments that describe the actions taken by your code.

When you are the **Coder**, you are responsible for reading the instructions / prompts and directing the Developer what to type in the Quarto document. You are responsible for managing the resources your group has available to you (e.g., cheatsheet, textbook). If necessary, you should work with the Developer to debug the code you specified. Once the code runs, you are expected to collaborate with the Developer to write code comments that describe the actions taken by your code.

### Group Norms

Remember, your group is expected to adhere to the following norms:

1.  Think and work together. Do not divide the work.
2.  You are smarter together.
3.  No cross-talk with other groups.

## Part Zero: Accessing the Practice Activity

<!-- This is a Quarto Comment - if you highlight any markdown text and press CTRL+Shift+C it will make it a comment which can only be seen in the un-rendered Quarto document-->

To access the activity and get it ready to share:

1.  The Developer (partner with first name alphabetically) should create a GitHub repo called "pa-2-code-breaking".  
2. To the description add "Peer Activity 2 with NAME1 and NAME 2" and check to add a README file and Create the Repository.  
3. Under Settings, go to Collaborators, the Add people and search for your partner by username or email.  
4. The partner should then log into GitHub and accept the invitation. Now you both should be able to push/pull to the same repository.  
5. The Developer should then create a Version Control R Project on their computer and then download the PA2 .qmd file into the folder.  
6. Test you connection by staging, committing, and pushing the new files (.Rproj and .qmd) to the GitHub Repository.  

Now you are ready to start!

<!-- Partner with the first name alphabetically starts as the... -->
<!-- Developer (typing and listening to instructions from the Coder!) -->

**For each code chunk, add a `#| label:` and a `#comment` describing what the code chunk is doing. Be sure to check that all spacing is appropriate as well!**

## Part One: Setup

Each of the following R chunks will cause an error and / or do the desired task incorrectly. The correct code is on the PA2 Activity on the webpage, please copy the correct code into each code chunk and add a label and comment.  

1.  Create vectors containing the upper case letters, lower case letters, and some punctuation marks. add a label that indicate this code chunk creates the vectors of letters and punctuation.

```{r}
#| label: Creating Vectors
lower_case <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
                "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")

upper_case <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
                "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z")

punctuation <- c(".", ",", "!", "?", "'", '"', "(", ")", " ", "-", ";", ":")
#Giving vectors for each types of symbol
```

2.  Make **one** long **vector** containing all the symbols.

```{r}
#| label: All Symbols
my_symbols <- c(lower_case, upper_case, punctuation)
#Creating a long vector of all the symbols from the chunk above
```

3.  Turn the `my_symbols` vector into a data frame, with one column named "symbol".

```{r}
#| label: Vector to data frame
my_symbols <- data.frame(symbol = my_symbols)
#changing the vector that was just created into a data frame of all the symbols
```

4.  Find the total number of symbols we have in our data frame.

```{r}
#| label: Total Symbols
len <- length(my_symbols)
#Using the df to find the total number of symbols
```

5.  Create a new variable in your dataframe that assigns a number to each symbol.

```{r}
#| label: Assigning numbers to symbols
my_symbols$num <- 1:len
#assigned each symbol from the df to a number
```

<!-- Developer Stage your Changes, Commit, and Push to the Git Repository-->
<!-- Now change roles (Developer becomes Coder) --> 
<!-- The new Developer should PULL down the repository to make changes on their computer -->

## Part Two: Decoding the secret message.

This chunk will load up the encoded secret message as a vector:

```{r}
#| label: loading-up-the-encoded-message
top_secret <- read_csv("https://www.dropbox.com/s/k72h1zewk4gtqep/PA_Secret_Code?dl=1", 
                       col_names = FALSE)$X1
# loading up the secret encoded messages as a vector
```

By altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps, **in the order given** below.

6.  Add 14 to every number.

```{r}
#| label: Adding-14-to-every-number
ts6 <- top_secret + 14
# adding 14 to every number
```

7.  Multiply every number by 18, then subtract 257.

```{r}
#| label: multiply-and-subtract
ts7 <- ts6*18 - 257
# multiping every number by 18 and then subtracting by 257
```

8.  Use the `exp()` function to exponentiate every number.

```{r}
#| label: Exponentiating-every-number
ts8 <- exp(ts7)
# exponentating every number
```

9.  Square every number.

```{r}
#| label: Squaring-every-number
ts9 <- ts8^2
# Squaring every number
```

**Checkpoint:** Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17. Write the code to verify that this is true for your `top_secret` object!

*Hint:* This is what is called a "relational" comparison, where you compare an object to a number and R will give you a vector of TRUEs and FALSEs based on whether the comparison is / is not met. You can then use these TRUEs and FALSEs as numbers, since TRUE = 1 and FALSE = 0 in R land.

```{r}
# Write code to verify that there are 352 numbers with values **below** 17
#| label: Verify 352 Numbers w/ Values
sum(ts9 < 17)
# We found the total number of values below the number 17
```

<!-- Developer Stage your Changes, Commit, and Push to the Git Repository-->
<!-- Now change roles (Developer becomes Coder) --> 
<!-- The new Developer should PULL down the repository to make changes on their computer -->

**Hint:** To update an object after performing an operation, you *overwrite* the existing object with its updated counterpart. This looks something like this:

`x <- x + 12`,

where the original value(s) in `x` have had 12 added to them, and the resulting values are put back in to the object named `x`. Be careful with this - if you do something wrong you will need to rerun the previous code chunks to reset everything! Fortunately, the grey arrow pointing down to the green line in each code chunk runs all previous code chunks again.

Next, carry out the following steps:

10. Turn your vector of numbers into a matrix with 5 columns.

```{r}
#| label: Vector to 5 Col Matrix
ts_mat <- matrix(ts9, ncol = 5) 
#turning our vector that was previously created into a matrix with 5 columns
```

11. Separately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it "evens". That is, "evens" should contain 2, 4, 6, 8 ..., 382.

```{r}
#| label: Vector of Even Numbers
evens <- seq(from = 2, to = 382, by = 2)
#creating vectors of all the even numbers from 1 to 382
```

12. Subtract the "evens" vector from the first column of your secret message matrix.

```{r}
#| label: Subtracting Evens
ts_mat[, 1] <- ts_mat[, 1] - evens
#subtracted evens from the first column of the secret message matrix
```

13. Subtract 100 from all numbers 18-24th rows of the 3rd column.

```{r}
#| label: Subtract 100 from rows 18-24 of col 3
ts_mat[18:24, 3] <- ts_mat[18:24, 3] - 100
#we subtracted 100 from all the numbers of the 18th to 24th row of column number 3
```

14. Multiply all numbers in the 4th and 5th column by 2.

```{r}
#| label: Multiply 4th and 5th column
ts_mat[, 4:5] <- ts_mat[, 4:5]*2 
# Multiplied all numbers within the 4th and 5th column by 2
```

15. Turn your matrix back into a vector.

```{r}
#| label: Matrix to Vector
ts_vec <- as.vector(ts_mat)
# turned our new matrix into a vector
```

**Checkpoint:** Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100. Write the code to verify that this is true for your `top_secret` object!

*Hint:* Use a relational comparison similar to what you used in the last checkpoint, but here you will need to subset values from your vector!

```{r}
# Write code to verify that indices 500 and beyond have values **below** 100
#| label: Verify indices below 100
sum(ts_vec[500:955] >= 100)
#Verifying that 500 indices and beyond have values below 100
```

<!-- Developer Stage your Changes, Commit, and Push to the Git Repository-->
<!-- Now change roles (Developer becomes Coder) --> 
<!-- The new Developer should PULL down the repository to make changes on their computer -->

16. Take the square root of all numbers in indices 38 to 465.

```{r}
#| label: summing-square-roots
sum(ts_vec[500:955] >= 100)
# Summing all the square roots in indices 38 to 465
```

17. Use the `round()` function to round all numbers to the nearest whole number.

```{r}
#| label: rounding
ts_vec <- round(ts_vec, digits = 0)
# rounding all numbers to the nearest whole number
```

18. Replace all instances of the number 39 with 20. *Hint:* Step 18 requires another relational comparison, but this time it is equality. Equality in R is checked with a double equal sign rather than a single equal sign

```{r}
#| label: Replacing-instances
ts_vec[ts_vec == 39 ] <- 20 
# replacing all instances of #39 with 20
```

**Checkpoint:** Headquarters has informed you that your final message should have 344 even numbers.

*Hint:* Checking for divisibility is an interesting operation that isn't done much in R. Modulus is the operation you are interested in, where you are checking for whether the numbers are divisible by 2, with no remainder. See what you can find about modulus in R!

```{r}
#| label: Finding even numbers
# Code to verify how many even numbers are in your top_secret vector

sum(ts_vec %% 2 == 0)

# Finding all numbers dividing by 2
```

<!-- Developer Stage your Changes, Commit, and Push to the Git Repository-->
<!-- Now change roles (Developer becomes Coder) --> 
<!-- The new Developer should PULL down the repository to make changes on their computer -->

## Part 3: The secret message!

Use your final vector of numbers as indices for my_symbols to discover the final message, by running the following code:

```{r}
#| label: The-secret-message
stringr::str_c(my_symbols$symbol[ts_vec], collapse = "")
# Finding out what the secret code is
```

Google the first line of this message, if you do not recognize it, to see what poem it is.

## Part 4: Wrap up

The last step is to make each code chunk hidden, even though it runs by modifying the YAML. Once knit to markdown format for viewing on GitHub, push all the final changes and rendered .md to the repository and submit your repository with your "quiz" for the week. Note that each person should be submit a link.
